{"ast":null,"code":"var _jsxFileName = \"/home/ifyzi/portfolio/scheduly/front-end/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Create the AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// AuthProvider component to wrap the app and provide authentication data\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // This will store the logged-in user\n  const navigate = useNavigate(); // Use navigate in context for redirection\n  const [loading, setLoading] = useState(true); // To track if auth check is complete\n\n  // On mount, check if user data exists in localStorage\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser)); // Restore user data from localStorage if present\n    }\n    setLoading(false); // Auth check is complete\n  }, []);\n\n  // Function to handle user signup\n  const signup = (email, password, username) => {\n    // Here you would usually call your API to sign up the user\n    // For now, let's mock this\n    const userData = {\n      email,\n      username\n    }; // Mock user data\n    setUser(userData); // If signup is successful, store the user object\n    localStorage.setItem('user', JSON.stringify(userData));\n\n    // Redirect to the home page or dashboard\n    navigate('/login');\n    return true;\n  };\n\n  // Function to handle user login\n  const login = (email, password) => {\n    // Here you would usually call your API to verify the user\n    // For now, let's mock this\n    if (email && password) {\n      const userData = {\n        email\n      }; // Mock user data\n      setUser(userData); // If login is successful, store the user object\n      localStorage.setItem('user', JSON.stringify(userData));\n\n      // Redirect to the home page or dashboard\n      navigate('/');\n      return true;\n    }\n    return false; // Return false if authentication fails\n  };\n\n  // Function to handle user logout\n  const logout = () => {\n    // Clear user data from context\n    setUser(null);\n\n    // Remove user data from localStorage\n    localStorage.removeItem('user');\n\n    // Redirect to login page after logout\n    navigate('/login');\n  };\n  const isAuthenticated = !!user; // Checks if user is not null\n  console.log(isAuthenticated);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      signup,\n      login,\n      logout,\n      isAuthenticated,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"k6S/G/TyOLNKGXuyF/kXwjrRVnE=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","navigate","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","signup","email","password","username","userData","setItem","stringify","login","logout","removeItem","isAuthenticated","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ifyzi/portfolio/scheduly/front-end/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Create the AuthContext\nexport const AuthContext = createContext();\n\n// AuthProvider component to wrap the app and provide authentication data\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null); // This will store the logged-in user\n  const navigate = useNavigate(); // Use navigate in context for redirection\n  const [loading, setLoading] = useState(true); // To track if auth check is complete\n\n  // On mount, check if user data exists in localStorage\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser)); // Restore user data from localStorage if present\n    }\n    setLoading(false); // Auth check is complete\n  }, []);\n\n  // Function to handle user signup\n  const signup = (email, password, username) => {\n    // Here you would usually call your API to sign up the user\n    // For now, let's mock this\n    const userData = { email, username }; // Mock user data\n    setUser(userData); // If signup is successful, store the user object\n    localStorage.setItem('user', JSON.stringify(userData));\n\n    // Redirect to the home page or dashboard\n    navigate('/login');\n\n    return true;\n  };\n\n  // Function to handle user login\n  const login = (email, password) => {\n    // Here you would usually call your API to verify the user\n    // For now, let's mock this\n    if (email && password) {\n      const userData = { email }; // Mock user data\n      setUser(userData); // If login is successful, store the user object\n      localStorage.setItem('user', JSON.stringify(userData));\n\n      // Redirect to the home page or dashboard\n      navigate('/');\n\n      return true;\n    }\n    return false; // Return false if authentication fails\n  };\n\n  // Function to handle user logout\n  const logout = () => {\n    // Clear user data from context\n    setUser(null);\n\n    // Remove user data from localStorage\n    localStorage.removeItem('user');\n\n    // Redirect to login page after logout\n    navigate('/login');\n  };\n\n  const isAuthenticated = !!user; // Checks if user is not null\n  console.log(isAuthenticated);\n\n  return (\n    <AuthContext.Provider value={{ user, signup, login, logout, isAuthenticated, loading }}>\n      {children}\n    </AuthContext.Provider>\n  )\n\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAMW,QAAQ,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACdJ,OAAO,CAACO,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC,CAAC,CAAC;IACnC;IACAD,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,MAAM,GAAGA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IAC5C;IACA;IACA,MAAMC,QAAQ,GAAG;MAAEH,KAAK;MAAEE;IAAS,CAAC,CAAC,CAAC;IACtCZ,OAAO,CAACa,QAAQ,CAAC,CAAC,CAAC;IACnBR,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACQ,SAAS,CAACF,QAAQ,CAAC,CAAC;;IAEtD;IACAZ,QAAQ,CAAC,QAAQ,CAAC;IAElB,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMe,KAAK,GAAGA,CAACN,KAAK,EAAEC,QAAQ,KAAK;IACjC;IACA;IACA,IAAID,KAAK,IAAIC,QAAQ,EAAE;MACrB,MAAME,QAAQ,GAAG;QAAEH;MAAM,CAAC,CAAC,CAAC;MAC5BV,OAAO,CAACa,QAAQ,CAAC,CAAC,CAAC;MACnBR,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACQ,SAAS,CAACF,QAAQ,CAAC,CAAC;;MAEtD;MACAZ,QAAQ,CAAC,GAAG,CAAC;MAEb,OAAO,IAAI;IACb;IACA,OAAO,KAAK,CAAC,CAAC;EAChB,CAAC;;EAED;EACA,MAAMgB,MAAM,GAAGA,CAAA,KAAM;IACnB;IACAjB,OAAO,CAAC,IAAI,CAAC;;IAEb;IACAK,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC;;IAE/B;IACAjB,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;EAED,MAAMkB,eAAe,GAAG,CAAC,CAACpB,IAAI,CAAC,CAAC;EAChCqB,OAAO,CAACC,GAAG,CAACF,eAAe,CAAC;EAE5B,oBACEzB,OAAA,CAACC,WAAW,CAAC2B,QAAQ;IAACC,KAAK,EAAE;MAAExB,IAAI;MAAEU,MAAM;MAAEO,KAAK;MAAEC,MAAM;MAAEE,eAAe;MAAEjB;IAAQ,CAAE;IAAAL,QAAA,EACpFA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAG3B,CAAC;AAAA7B,EAAA,CAlEYF,YAAY;EAAA,QAENJ,WAAW;AAAA;AAAAoC,EAAA,GAFjBhC,YAAY;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}