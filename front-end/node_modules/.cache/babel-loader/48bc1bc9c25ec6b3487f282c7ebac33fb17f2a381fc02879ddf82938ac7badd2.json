{"ast":null,"code":"var _jsxFileName = \"/home/ifyzi/portfolio/scheduly/front-end/src/context/EventContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\n\n//Create EventContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EventContext = /*#__PURE__*/createContext();\n\n//Create EventProvider component to wrap around the components and provide event-related data\nexport const EventProvider = ({\n  children\n}) => {\n  _s();\n  const [eventData, setEventData] = useState([]); // This will store all the events\n\n  // Load events from localStorage when the component mounts\n  useEffect(() => {\n    const storedEvents = localStorage.getItem('events');\n    if (storedEvents) {\n      setEventData(JSON.parse(storedEvents));\n    } else {\n      fetchEvents(); // Fetch events if no data is present in localStorage\n    }\n  }, []);\n\n  // Save events to localStorage whenever eventData changes\n  useEffect(() => {\n    if (eventData.length > 0) {\n      localStorage.setItem('events', JSON.stringify(eventData));\n    }\n  }, [eventData]);\n\n  // CRUD operations\n  // Function to create a new event\n  const createEvent = newEvent => {\n    // Here, you'd typically make an API call to store the event in a backend\n    // For now, we'll just update the local state\n    setEventData(prevEvents => [...prevEvents, newEvent]);\n  };\n  const updateEvent = updatedEvent => {\n    setEventData(prevEvents => prevEvents.map(event => event.id === updatedEvent.id ? updatedEvent : event));\n  };\n  const deleteEvent = eventId => {\n    setEventData(prevEvents => prevEvents.filter(event => event.id !== eventId));\n  };\n\n  // Function to fetch events (mocked for now)\n  const fetchEvents = () => {\n    // API call to fetch events from backend would go here\n    // For now, let's mock the data\n    const mockedEvents = [{\n      name: \"Event 1\",\n      date: \"2021-09-01\",\n      time: \"10:00\",\n      location: \"Location 1\",\n      description: \"Description 1\"\n    }, {\n      name: \"Event 2\",\n      date: \"2021-09-02\",\n      time: \"11:00\",\n      location: \"Location 2\",\n      description: \"Description 2\"\n    }];\n    console.log('Fetching events:', mockedEvents);\n    setEventData(mockedEvents);\n  };\n  return /*#__PURE__*/_jsxDEV(EventContext.Provider, {\n    value: {\n      eventData,\n      createEvent,\n      fetchEvents,\n      updateEvent,\n      deleteEvent\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(EventProvider, \"LE7Fip1u6+uuzbsLS7dCESMS2GI=\");\n_c = EventProvider;\nvar _c;\n$RefreshReg$(_c, \"EventProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","EventContext","EventProvider","children","_s","eventData","setEventData","storedEvents","localStorage","getItem","JSON","parse","fetchEvents","length","setItem","stringify","createEvent","newEvent","prevEvents","updateEvent","updatedEvent","map","event","id","deleteEvent","eventId","filter","mockedEvents","name","date","time","location","description","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ifyzi/portfolio/scheduly/front-end/src/context/EventContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\n//Create EventContext\nexport const EventContext = createContext();\n\n//Create EventProvider component to wrap around the components and provide event-related data\nexport const EventProvider = ({ children }) => {\n  const [eventData, setEventData] = useState([]); // This will store all the events\n\n  // Load events from localStorage when the component mounts\n  useEffect(() => {\n    const storedEvents = localStorage.getItem('events');\n    if (storedEvents) {\n      setEventData(JSON.parse(storedEvents));\n    } else {\n      fetchEvents(); // Fetch events if no data is present in localStorage\n    }\n  }, []);\n\n  // Save events to localStorage whenever eventData changes\n  useEffect(() => {\n    if (eventData.length > 0) {\n      localStorage.setItem('events', JSON.stringify(eventData));\n    }\n  }, [eventData]);\n\n  // CRUD operations\n  // Function to create a new event\n  const createEvent = (newEvent) => {\n    // Here, you'd typically make an API call to store the event in a backend\n    // For now, we'll just update the local state\n    setEventData((prevEvents) => [...prevEvents, newEvent]);\n  };\n\n  const updateEvent = (updatedEvent) => {\n    setEventData((prevEvents) =>\n      prevEvents.map(event => event.id === updatedEvent.id ? updatedEvent : event)\n    );\n  };\n\n  const deleteEvent = (eventId) => {\n    setEventData((prevEvents) => prevEvents.filter(event => event.id !== eventId));\n  };\n\n  // Function to fetch events (mocked for now)\n  const fetchEvents = () => {\n    // API call to fetch events from backend would go here\n    // For now, let's mock the data\n    const mockedEvents = [\n      {\n        name: \"Event 1\",\n        date: \"2021-09-01\",\n        time: \"10:00\",\n        location: \"Location 1\",\n        description: \"Description 1\",\n      },\n      {\n        name: \"Event 2\",\n        date: \"2021-09-02\",\n        time: \"11:00\",\n        location: \"Location 2\",\n        description: \"Description 2\",\n      },\n    ];\n    console.log('Fetching events:', mockedEvents);\n    setEventData(mockedEvents);\n  };\n\n  return (\n    <EventContext.Provider value={{ eventData, createEvent, fetchEvents, updateEvent, deleteEvent }}>\n      {children}\n    </EventContext.Provider>\n  )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;;AAE3C;AACA,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACnD,IAAIF,YAAY,EAAE;MAChBD,YAAY,CAACI,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,CAAC;IACxC,CAAC,MAAM;MACLK,WAAW,CAAC,CAAC,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAd,SAAS,CAAC,MAAM;IACd,IAAIO,SAAS,CAACQ,MAAM,GAAG,CAAC,EAAE;MACxBL,YAAY,CAACM,OAAO,CAAC,QAAQ,EAAEJ,IAAI,CAACK,SAAS,CAACV,SAAS,CAAC,CAAC;IAC3D;EACF,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACA;EACA,MAAMW,WAAW,GAAIC,QAAQ,IAAK;IAChC;IACA;IACAX,YAAY,CAAEY,UAAU,IAAK,CAAC,GAAGA,UAAU,EAAED,QAAQ,CAAC,CAAC;EACzD,CAAC;EAED,MAAME,WAAW,GAAIC,YAAY,IAAK;IACpCd,YAAY,CAAEY,UAAU,IACtBA,UAAU,CAACG,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,KAAKH,YAAY,CAACG,EAAE,GAAGH,YAAY,GAAGE,KAAK,CAC7E,CAAC;EACH,CAAC;EAED,MAAME,WAAW,GAAIC,OAAO,IAAK;IAC/BnB,YAAY,CAAEY,UAAU,IAAKA,UAAU,CAACQ,MAAM,CAACJ,KAAK,IAAIA,KAAK,CAACC,EAAE,KAAKE,OAAO,CAAC,CAAC;EAChF,CAAC;;EAED;EACA,MAAMb,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA;IACA,MAAMe,YAAY,GAAG,CACnB;MACEC,IAAI,EAAE,SAAS;MACfC,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,YAAY;MACtBC,WAAW,EAAE;IACf,CAAC,EACD;MACEJ,IAAI,EAAE,SAAS;MACfC,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,YAAY;MACtBC,WAAW,EAAE;IACf,CAAC,CACF;IACDC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEP,YAAY,CAAC;IAC7CrB,YAAY,CAACqB,YAAY,CAAC;EAC5B,CAAC;EAED,oBACE3B,OAAA,CAACC,YAAY,CAACkC,QAAQ;IAACC,KAAK,EAAE;MAAE/B,SAAS;MAAEW,WAAW;MAAEJ,WAAW;MAAEO,WAAW;MAAEK;IAAY,CAAE;IAAArB,QAAA,EAC7FA;EAAQ;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAApC,EAAA,CAnEYF,aAAa;AAAAuC,EAAA,GAAbvC,aAAa;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}